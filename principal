import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'b1serviceflayer_base.dart';
import 'connection.dart' as conf;
import 'dart:async';
import 'dart:io';
import 'quicktype_error.dart';

class MyHttpOverrides extends HttpOverrides{
  @override
  HttpClient createHttpClient(SecurityContext context){
    return super.createHttpClient(context)
      ..badCertificateCallback = (X509Certificate cert, String host, int port)=> true;
  }

}

class ListInvForm extends StatefulWidget {
  @override
  _ListInvFormState createState() => _ListInvFormState();
}

class _ListInvFormState extends State<ListInvForm> {
  final _formKey = GlobalKey<FormState>();
  String _customerId='';
  String CardCode='';
  String UnitsOfMeasurment='';
  String PriceListNum='';
  String CardName='';
  String WhsCode='';
  String Quantity='';
  List<Map<String, dynamic>> _listInv = [];

  List listrepo4=[];
  TextEditingController _WarehouseController = TextEditingController();
  TextEditingController controller = TextEditingController();





  Future<void> _fetchOrderItem(String WhsCode) async {

    final configData = await conf.Connection.getConfigData();
    final ipAddress = configData['ipAddress'];
    final url = configData['url'];
    final user = configData['user'];
    final pwd = configData['pwd'];
    final companyDB = configData['companyDB'];
    HttpOverrides.global = new MyHttpOverrides();

    // "U_JC_MaquinaTipo"
    //"U_JC_MaqPadre", T0."U_JC_MaqModelo"
    final b1s = B1ServiceLayer(B1Connection(serverUrl:ipAddress+url,
        companyDB: companyDB, userName: user, password: pwd),printLogins: true);
    print("Querying Inventario...");



    try {
      String _activitiesJson2 = await b1s.queryAsync("sml.svc/TEST2?\$filter=WhsCode eq '$WhsCode'");
      bool hasNextLink = true;
      while (hasNextLink) {
        Map<String, dynamic> activitiesMap2 = json.decode(_activitiesJson2);
        //List<dynamic> activityList = activitiesMap2["value"];
        //print('${activityList.length} activities returned in maquinas ${b1s.exetutionMilliseconds} ms');
        List<dynamic> map = activitiesMap2["value"];
        print(_activitiesJson2);
        //  print(activitiesMap2);
        while (activitiesMap2.containsKey("@odata.nextLink")) {
          String nextLink = activitiesMap2["@odata.nextLink"];
          String nextJson = await b1s.queryAsync("sml.svc/$nextLink");
          Map<String, dynamic> nextMap = json.decode(nextJson);
          List nextList = nextMap["value"];
          map.addAll(nextList);
          activitiesMap2 = nextMap;
        }
        print(map.length);

        if (map == null || map.isEmpty) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Almacen No Existe'),
            ),
          );
        } else {
          setState(() {
            for (var i = 0; i < map.length; i++) {
              var currentItem = map[i];
              var itemCode = currentItem["ItemCode"];
              var itemName = currentItem["ItemName"];
              var absEntry = currentItem["AbsEntry"];
              var whsCode = currentItem["WhsCode"];
              var binCode = currentItem["BinCode"];

              var sL1Abs = currentItem["SL1Abs"];
              var sL1Code = currentItem["SL1Code"];
              var sL2Abs = currentItem["SL2Abs"];
              var sL2Code = currentItem["SL2Code"];
              var sL3Abs = currentItem["SL3Abs"];
              var sL3Code = currentItem["SL3Code"];
              var sL4Abs = currentItem["sL4Abs"];
              var sL4Code = currentItem["SL4Code"];


              var onHandQty = currentItem["OnHandQty"];


              var batchNumber = currentItem["DistNumber"];
              var expDate = currentItem["ExpDate"];
              var batchQty = currentItem["OnHandQty"];

              var existingItem = _listInv.firstWhere((item) =>
              item["ItemCode"] == itemCode && item["BinEntry"] == absEntry,
                  orElse: () => null);

              if (existingItem == null) {
                var newItem = {
                  "ItemCode": itemCode,
                  "ItemName": itemName,
                  "WarehouseCode": currentItem["WhsCode"],
                  "BinEntry": absEntry,
                  "BinCode":binCode,
                  "CountedQuantity": onHandQty,
                  "InventoryCountingBatchNumbers": [
                    {
                      "BatchNumber": batchNumber,
                      "ExpDate":expDate,
                      "Quantity": batchQty
                    }
                  ]
                };
                _listInv.add(newItem);
              } else {
                existingItem["CountedQuantity"] += onHandQty;
                existingItem["InventoryCountingBatchNumbers"].add({
                  "BatchNumber": batchNumber,
                  "Quantity": batchQty
                });
              }
            }


          //  print('lista inventario prueba 2 ${_listInv.length}');
            print('lista inventario prueba ${_listInv}');
          });

          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Item Cargado Exitosamente')),
          );
        }

        return _activitiesJson2;

      }
    } catch(e) {
      if(e is B1Error) {
        print("Exception is B1Error (${e.statusCode}) ${e.error.message.value} (${e.error.code}) for Query ${e.queryUrl} Payload ${e.postBody}");
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error al Cargar Item o Producto No Existe')),
        );
      }

    }

  }

  void _submitOrder(b1s) async {
    final configData = await conf.Connection.getConfigData();
    final ipAddress = configData['ipAddress'];
    final url = configData['url'];
    final user = configData['user'];
    final pwd = configData['pwd'];
    final companyDB = configData['companyDB'];
    HttpOverrides.global = new MyHttpOverrides();

    // "U_JC_MaquinaTipo"
    //"U_JC_MaqPadre", T0."U_JC_MaqModelo"
    final b1s = B1ServiceLayer(B1Connection(serverUrl:ipAddress+url,
        companyDB: companyDB, userName: user, password: pwd),printLogins: true);
    print("Agregar una nueva oferta de venta ...");

    try{
      String activityJson = await addActivity(b1s);
      Map<String, dynamic> activityMap = json.decode(activityJson);
      print('Orden creada con Número ${activityMap["DocNum"]} para ${activityMap["CardName"]} in ${b1s.exetutionMilliseconds} ms');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Orden creada con Número ${activityMap["DocNum"]} para ${activityMap["CardName"]}')),
      );
    } catch(e) {
      if(e is B1Error) {
        print("Exception is B1Error (${e.statusCode}) ${e.error.message.value} (${e.error.code}) for Query ${e.queryUrl} Payload ${e.postBody}");
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error al Guardar los Datos')),
        );
      }

    }
  }

  Future<String> addActivity(B1ServiceLayer b1s) async {
    final Map<String,dynamic> activityData = {};
    //Subject:-1, ActivityType: -1 /*General*/, Status: -2 /*NotStarted, -3=Completed*/,
    print("proceso 2 ...");
    //  print(int.parse(_WarehouseController.text));
    //  activityData["U_JR_CC_ItemDescription"]= _ItemDescriptionController.text;

    activityData["DocDueDate"]= "2023-05-18";
    activityData["CardCode"]= CardCode;
    //activityData["CardName"]= CardName;
    activityData["DocCurrency"]= "USD";
    activityData["U_CT_IMPRESION"]= "USD";

    activityData["DocObjectCode"]= "oQuotations";
    activityData["DocumentLines"]= _listInv;
    // print(json.encode(activityData));


    return await b1s.createAsync(entityName: "Quotations", entityJSON: json.encode(activityData));


  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Crear Recuento de Inventario'),
      ),
      body:SingleChildScrollView( // wrap with a scrollable widget
        child: Container(
          padding: EdgeInsets.symmetric(horizontal: 20.0),
          child: Form(
            key: _formKey,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: <Widget>[

                Container(
                  height: 50,
                  width: 250,
                  margin: EdgeInsets.symmetric(vertical: 12.0),
                  child: TextFormField(
                    decoration: InputDecoration(
                      border: OutlineInputBorder(),
                      labelText: 'Ingrese Código de Almacén',
                      suffixIcon: IconButton(
                        icon: Icon(Icons.search),
                        onPressed: () async {
                          if (_formKey.currentState.validate()) {
                            setState(() {
                              WhsCode = _WarehouseController.text;
                            });

                            await _fetchOrderItem(WhsCode);

                          }
                        },
                      ),
                    ),
                    validator: (value) {
                      if (value.isEmpty) {
                        return 'Please enter an item ID';
                      }
                      return null;
                    },
                    controller: _WarehouseController,

                  ),),

                if (_listInv.isNotEmpty)

                  Container(

                    height: 290,
                    width: 1200,// set a fixed height
                    child: ListView.builder(
                      itemCount: _listInv.fold<Set<String>>(
                        Set(),
                            (set, item) => set..add(item["BinCode"]),
                      ).length,
                      itemBuilder: (context, index) {

                        List<String> splitBinCode(String binCode) {
                          List<String> parts = binCode.split("-");
                          List<String> result = [];
                          for (String part in parts) {
                            int value = int.tryParse(part);
                            if (value != null) {
                              result.add(value.toString().padLeft(10, "0"));
                            } else {
                              result.add(part);
                            }
                          }
                          return result;
                        }

                        _listInv.sort((a, b) {
                          List<String> aParts = splitBinCode(a["BinCode"]);
                          List<String> bParts = splitBinCode(b["BinCode"]);
                          int cmp = aParts[0].compareTo(bParts[0]);
                          if (cmp != 0) {
                            return cmp;
                          }
                          for (int i = 1; i < aParts.length && i < bParts.length; i++) {
                            cmp = aParts[i].compareTo(bParts[i]);
                            if (cmp != 0) {
                              return cmp;
                            }
                          }
                          return aParts.length.compareTo(bParts.length);
                        });

                        List<String> binCodes = _listInv.fold<Set<String>>(Set(),(set, item) => set..add(item["BinCode"]),).toList();


                        final binCode = binCodes[index];


                        final itemsInBin = _listInv.where((item) => item["BinCode"] == binCode).toList();
                        return Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                          Text(
                          '$binCode',
                          style: TextStyle(
                            fontSize: 18, // Tamaño de la fuente
                            fontWeight: FontWeight.bold, // Negrita
                          ),
                        ),
                            ListView.builder(
                              shrinkWrap: true,
                              physics: NeverScrollableScrollPhysics(),
                              itemCount: itemsInBin.length,

                              itemBuilder: (context, index) {
                                final item = itemsInBin[index];
                                return Column(
                                  children: [
                                    Row(
                                      children: [
                                        Container(
                                          width: 100,
                                          height: 30,
                                          decoration: BoxDecoration(
                                            borderRadius: BorderRadius.circular(10),
                                            border: Border.all(
                                              color: Colors.grey,
                                              width: 1,
                                            ),
                                          ),
                                          child: Center(child: Text(item["ItemCode"])),
                                        ),
                                        Container(
                                          width: 450,
                                          height: 30,
                                          decoration: BoxDecoration(
                                            borderRadius: BorderRadius.circular(10),
                                            border: Border.all(
                                              color: Colors.grey,
                                              width: 1,
                                            ),
                                          ),
                                          child: Align(
                                            alignment: Alignment.centerLeft,
                                            child: Padding(
                                              padding: EdgeInsets.only(left: 10), // Ajusta el valor del padding según tu preferencia
                                              child: Text(
                                                item["ItemName"],
                                              ),
                                            ),
                                          ),
                                        ),
                                        Container(
                                          width: 150,
                                          height: 30,
                                          decoration: BoxDecoration(
                                            borderRadius: BorderRadius.circular(10),
                                            border: Border.all(
                                              color: Colors.grey,
                                              width: 1,
                                            ),
                                          ),
                                          child: Center(child: Text(item["InventoryCountingBatchNumbers"][0]["BatchNumber"])),
                                        ),
                                        Container(
                                          width: 100,
                                          height: 30,
                                          decoration: BoxDecoration(
                                            borderRadius: BorderRadius.circular(10),
                                            border: Border.all(
                                              color: Colors.grey,
                                              width: 1,
                                            ),
                                          ),
                                          child: Center(child: Text(item["InventoryCountingBatchNumbers"][0]["ExpDate"] ?? '')),
                                        ),
                                        Container(
                                          width: 100,
                                          height: 30,
                                          decoration: BoxDecoration(
                                            borderRadius: BorderRadius.circular(10),
                                            border: Border.all(
                                              color: Colors.grey,
                                              width: 1,
                                            ),
                                          ),
                                          child: Center(child: Text(
                                            double.parse(item["InventoryCountingBatchNumbers"][0]["Quantity"].toStringAsFixed(3)).toString(),)),
                                        ),
                                      ],
                                    ),
                                    if (item["InventoryCountingBatchNumbers"].length > 1)
                                      ListView.builder(
                                        shrinkWrap: true,
                                        physics: NeverScrollableScrollPhysics(),
                                        itemCount: item["InventoryCountingBatchNumbers"].length - 1,
                                        itemBuilder: (context, index) {
                                          final batch = item["InventoryCountingBatchNumbers"][index + 1];
                                          return Row(
                                            children: [
                                              Container(
                                                width: 100,
                                                height: 30,
                                                decoration: BoxDecoration(
                                                  borderRadius: BorderRadius.circular(10),
                                                  border: Border.all(
                                                    color: Colors.grey,
                                                    width: 1,
                                                  ),
                                                ),
                                                child: Center(child: Text(item["ItemCode"])),
                                              ),
                                              Container(
                                                width: 450,
                                                height: 30,
                                                decoration: BoxDecoration(
                                                  borderRadius: BorderRadius.circular(10),
                                                  border: Border.all(
                                                    color: Colors.grey,
                                                    width: 1,
                                                  ),
                                                ),
                                                child: Align(
                                                  alignment: Alignment.centerLeft,
                                                  child: Padding(
                                                    padding: EdgeInsets.only(left: 10), // Ajusta el valor del padding según tu preferencia
                                                    child: Text(
                                                      item["ItemName"],
                                                    ),
                                                  ),
                                                ),
                                              ),
                                              Container(
                                                width: 150,
                                                height: 30,
                                                decoration: BoxDecoration(
                                                  borderRadius: BorderRadius.circular(10),
                                                  border: Border.all(
                                                    color: Colors.grey,
                                                    width: 1,
                                                  ),
                                                ),
                                                child: Center(child: Text(batch["BatchNumber"])),
                                              ),
                                              Container(
                                                width: 100,
                                                height: 30,
                                                decoration: BoxDecoration(
                                                  borderRadius: BorderRadius.circular(10),
                                                  border: Border.all(
                                                    color: Colors.grey,
                                                    width: 1,
                                                  ),
                                                ),
                                                child: Center(child: Text(batch["ExpDate"] ?? '')),
                                              ),
                                              Container(
                                                width: 100,
                                                height: 30,
                                                decoration: BoxDecoration(
                                                  borderRadius: BorderRadius.circular(10),
                                                  border: Border.all(
                                                    color: Colors.grey,
                                                    width: 1,
                                                  ),
                                                ),
                                                child: Center(child: Text(
                                          double.parse(batch["Quantity"].toStringAsFixed(3)).toString())),
                                              ),
                                            ],


                                          );
                                        },
                                      ),
                                  ],
                                );
                              },
                            ),
                          ],
                        );
                      },
                    ),
                  ),


                ElevatedButton(
                  child: Text('Generar Recuento'),
                  onPressed: () {
                    if (_formKey.currentState.validate()) {
                      _formKey.currentState.save();
                      _submitOrder(CardCode);
                    }
                  },
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
